{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet RegisterComponent = class RegisterComponent {\n  constructor(router, authService, formBuilder, tokenStorage) {\n    this.router = router;\n    this.authService = authService;\n    this.formBuilder = formBuilder;\n    this.tokenStorage = tokenStorage;\n    this.formRegister = {\n      username: null,\n      email: null,\n      password: null\n    };\n    this.isSuccessful = false;\n    this.isSignUpFailed = false;\n    this.errorMessage = '';\n    this.formLogin = {\n      username: null,\n      password: null\n    };\n    this.isLoggedIn = false;\n    this.isLoginFailed = false;\n    this.errorMessage2 = '';\n    this.roles = [];\n  }\n  ngOnInit() {\n    this.formRegister = this.formBuilder.group({\n      username: ['', Validators.required],\n      email: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n    this.formLogin = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n    if (this.tokenStorage.getToken()) {\n      this.isLoggedIn = true;\n      this.roles = this.tokenStorage.getUser().roles;\n    }\n  }\n  onSubmitRegister() {\n    const {\n      username,\n      email,\n      password\n    } = this.formRegister;\n    console.log(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\");\n    this.authService.register(username, email, password).subscribe({\n      next: data => {\n        console.log(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\");\n        console.log(data);\n        this.isSuccessful = true;\n        this.isSignUpFailed = false;\n      },\n      error: err => {\n        this.errorMessage = err.error.message;\n        this.isSignUpFailed = true;\n      }\n    });\n  }\n  onSubmitLogin() {\n    const {\n      username,\n      password\n    } = this.formLogin;\n    console.log(\"test\");\n    this.authService.login(username, password).subscribe({\n      next: data => {\n        console.log(\"data : \", data);\n        this.tokenStorage.saveToken(data.accessToken);\n        this.tokenStorage.saveUser(data);\n        this.isLoginFailed = false;\n        this.isLoggedIn = true;\n        this.roles = this.tokenStorage.getUser().roles;\n        console.log(\"Roles : \", this.roles);\n        console.log(\"user : \", this.tokenStorage.getUser());\n        this.router.navigate(['product/home']);\n      },\n      error: err => {\n        this.errorMessage = err.error.message;\n        this.isLoginFailed = true;\n      }\n    });\n  }\n  reloadPage() {\n    window.location.reload();\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","RegisterComponent","constructor","router","authService","formBuilder","tokenStorage","username","email","password","ngOnInit","formRegister","group","required","formLogin","getToken","isLoggedIn","roles","getUser","onSubmitRegister","console","log","register","subscribe","next","data","isSuccessful","isSignUpFailed","error","err","errorMessage","message","onSubmitLogin","login","saveToken","accessToken","saveUser","isLoginFailed","navigate","reloadPage","window","location","reload","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/hp/Desktop/crm project/CRMFEFO/src/app/auth/register/register.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators ,FormGroup} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/service/auth.service';\nimport { TokenStorageService } from 'src/app/_services/token-storage.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit{\n\n formRegister:any={\n    username:null,\n    email:null,\n    password:null\n};\n\n  isSuccessful = false;\n  isSignUpFailed = false;\n  errorMessage = '';\n\n  formLogin: any = {\n    username: null,\n    password: null\n  };\n  isLoggedIn = false;\n  isLoginFailed = false;\n  errorMessage2 = '';\n  roles: string[] = []; \n\n  \n\nconstructor(private router: Router,\nprivate authService: AuthService,\nprivate formBuilder: FormBuilder, \nprivate tokenStorage: TokenStorageService) { }\n\nngOnInit(): void {\nthis.formRegister = this.formBuilder.group({\n    username: ['',Validators.required],\n    email: ['',Validators.required],\n    password: ['',Validators.required],\n   \n  });\n\n  this.formLogin = this.formBuilder.group({\n    username: ['', Validators.required],\n    password: ['', Validators.required]\n});\n\n\n  if (this.tokenStorage.getToken()) {\n    this.isLoggedIn = true;\n    this.roles = this.tokenStorage.getUser().roles;\n  } \n}\n\nonSubmitRegister(): void {\nconst { username, email, password } = this.formRegister;\nconsole.log(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\");\nthis.authService.register(username, email, password).subscribe({\n  next: (data: any) => {\n    console.log(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\");\n    console.log(data);\n    this.isSuccessful = true;\n    this.isSignUpFailed = false;\n  },\n  error: (err: { error: { message: any; }; }) => {\n    this.errorMessage = err.error.message;\n    this.isSignUpFailed = true;\n  }\n});\n}\n\nonSubmitLogin(): void {\nconst { username, password } = this.formLogin;\nconsole.log(\"test\");\n\nthis.authService.login(username, password).subscribe({\n  next: data => {\n    console.log(\"data : \", data); \n    this.tokenStorage.saveToken(data.accessToken);\n    this.tokenStorage.saveUser(data);\n\n    this.isLoginFailed = false;\n    this.isLoggedIn = true;\n    this.roles = this.tokenStorage.getUser().roles;\n\n    console.log(\"Roles : \", this.roles);   \n    console.log(\"user : \", this.tokenStorage.getUser()) ;    \n    this.router.navigate(['product/home']);\n  },\n  error: err => {\n    this.errorMessage = err.error.message;\n    this.isLoginFailed = true;\n  }\n});\n}\n\nreloadPage(): void {\nwindow.location.reload();\n}\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}