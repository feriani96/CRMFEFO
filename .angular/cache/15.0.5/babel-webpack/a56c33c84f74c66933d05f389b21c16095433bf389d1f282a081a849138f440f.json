{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet RegisterComponent = class RegisterComponent {\n  constructor(router, authService, formBuilder, tokenStorage) {\n    this.router = router;\n    this.authService = authService;\n    this.formBuilder = formBuilder;\n    this.tokenStorage = tokenStorage;\n    /* formRegister:any={\n      username:null,\n      email:null,\n      password:null\n    };\n    */\n    /*isSuccessful = false;\n    isSignUpFailed = false;*/\n    this.errorMessage = '';\n    this.formLogin = {\n      username: null,\n      password: null\n    };\n    this.isLoggedIn = false;\n    this.isLoginFailed = false;\n    this.errorMessage2 = '';\n    this.roles = [];\n  }\n  ngOnInit() {\n    /*this.formRegister = this.formBuilder.group({\n        username: ['',Validators.required],\n        email: ['',Validators.required],\n        password: ['',Validators.required],\n       \n      });*/\n    this.formLogin = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n    if (this.tokenStorage.getToken()) {\n      this.isLoggedIn = true;\n      this.roles = this.tokenStorage.getUser().roles;\n    }\n  }\n  /*\n  onSubmitRegister(): void {\n  const { username, email, password } = this.formRegister;\n  console.log(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\");\n  this.authService.register(username, email, password).subscribe({\n    next: (data: any) => {\n      console.log(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\");\n      console.log(data);\n      this.isSuccessful = true;\n      this.isSignUpFailed = false;\n    },\n    error: (err: { error: { message: any; }; }) => {\n      this.errorMessage = err.error.message;\n      this.isSignUpFailed = true;\n    }\n  });\n  }*/\n  onSubmitLogin() {\n    const {\n      username,\n      password\n    } = this.formLogin;\n    console.log(\"test\");\n    this.authService.login(username, password).subscribe({\n      next: data => {\n        console.log(\"data : \", data);\n        this.tokenStorage.saveToken(data.accessToken);\n        this.tokenStorage.saveUser(data);\n        this.isLoginFailed = false;\n        this.isLoggedIn = true;\n        this.roles = this.tokenStorage.getUser().roles;\n        console.log(\"Roles : \", this.roles);\n        console.log(\"user : \", this.tokenStorage.getUser());\n        this.router.navigate(['product/home']);\n      },\n      error: err => {\n        this.errorMessage = err.error.message;\n        this.isLoginFailed = true;\n      }\n    });\n  }\n  reloadPage() {\n    window.location.reload();\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAO1C,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAuB9BC,YAAoBC,MAAc,EAC1BC,WAAwB,EACxBC,WAAwB,EACxBC,YAAiC;IAHrB,WAAM,GAANH,MAAM;IAClB,gBAAW,GAAXC,WAAW;IACX,gBAAW,GAAXC,WAAW;IACX,iBAAY,GAAZC,YAAY;IAxBlB;;;;;;IAMA;;IAEA,iBAAY,GAAG,EAAE;IAEjB,cAAS,GAAQ;MACfC,QAAQ,EAAE,IAAI;MACdC,QAAQ,EAAE;KACX;IACD,eAAU,GAAG,KAAK;IAClB,kBAAa,GAAG,KAAK;IACrB,kBAAa,GAAG,EAAE;IAClB,UAAK,GAAa,EAAE;EAOuB;EAE7CC,QAAQ;IACR;;;;;;IAOE,IAAI,CAACC,SAAS,GAAG,IAAI,CAACL,WAAW,CAACM,KAAK,CAAC;MACtCJ,QAAQ,EAAE,CAAC,EAAE,EAAEK,UAAU,CAACC,QAAQ,CAAC;MACnCL,QAAQ,EAAE,CAAC,EAAE,EAAEI,UAAU,CAACC,QAAQ;KACrC,CAAC;IAGA,IAAI,IAAI,CAACP,YAAY,CAACQ,QAAQ,EAAE,EAAE;MAChC,IAAI,CAACC,UAAU,GAAG,IAAI;MACtB,IAAI,CAACC,KAAK,GAAG,IAAI,CAACV,YAAY,CAACW,OAAO,EAAE,CAACD,KAAK;;EAElD;EACA;;;;;;;;;;;;;;;;;EAkBAE,aAAa;IACb,MAAM;MAAEX,QAAQ;MAAEC;IAAQ,CAAE,GAAG,IAAI,CAACE,SAAS;IAC7CS,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;IAEnB,IAAI,CAAChB,WAAW,CAACiB,KAAK,CAACd,QAAQ,EAAEC,QAAQ,CAAC,CAACc,SAAS,CAAC;MACnDC,IAAI,EAAEC,IAAI,IAAG;QACXL,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEI,IAAI,CAAC;QAC5B,IAAI,CAAClB,YAAY,CAACmB,SAAS,CAACD,IAAI,CAACE,WAAW,CAAC;QAC7C,IAAI,CAACpB,YAAY,CAACqB,QAAQ,CAACH,IAAI,CAAC;QAEhC,IAAI,CAACI,aAAa,GAAG,KAAK;QAC1B,IAAI,CAACb,UAAU,GAAG,IAAI;QACtB,IAAI,CAACC,KAAK,GAAG,IAAI,CAACV,YAAY,CAACW,OAAO,EAAE,CAACD,KAAK;QAE9CG,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE,IAAI,CAACJ,KAAK,CAAC;QACnCG,OAAO,CAACC,GAAG,CAAC,SAAS,EAAE,IAAI,CAACd,YAAY,CAACW,OAAO,EAAE,CAAC;QACnD,IAAI,CAACd,MAAM,CAAC0B,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC;MACxC,CAAC;MACDC,KAAK,EAAEC,GAAG,IAAG;QACX,IAAI,CAACC,YAAY,GAAGD,GAAG,CAACD,KAAK,CAACG,OAAO;QACrC,IAAI,CAACL,aAAa,GAAG,IAAI;MAC3B;KACD,CAAC;EACF;EAEAM,UAAU;IACVC,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;EACxB;CAGC;AA/FYpC,iBAAiB,eAL7BD,SAAS,CAAC;EACTsC,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,GACWvC,iBAAiB,CA+F7B;SA/FYA,iBAAiB","names":["Component","RegisterComponent","constructor","router","authService","formBuilder","tokenStorage","username","password","ngOnInit","formLogin","group","Validators","required","getToken","isLoggedIn","roles","getUser","onSubmitLogin","console","log","login","subscribe","next","data","saveToken","accessToken","saveUser","isLoginFailed","navigate","error","err","errorMessage","message","reloadPage","window","location","reload","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/hp/Desktop/crm project/CRMFEFO/src/app/auth/register/register.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit{\n\n  /* formRegister:any={\n    username:null,\n    email:null,\n    password:null\n};\n*/\n  /*isSuccessful = false;\n  isSignUpFailed = false;*/\n  errorMessage = '';\n\n  formLogin: any = {\n    username: null,\n    password: null\n  };\n  isLoggedIn = false;\n  isLoginFailed = false;\n  errorMessage2 = '';\n  roles: string[] = []; \n\n  \n\nconstructor(private router: Router,\nprivate authService: AuthService,\nprivate formBuilder: FormBuilder, \nprivate tokenStorage: TokenStorageService) { }\n\nngOnInit(): void {\n/*this.formRegister = this.formBuilder.group({\n    username: ['',Validators.required],\n    email: ['',Validators.required],\n    password: ['',Validators.required],\n   \n  });*/\n\n  this.formLogin = this.formBuilder.group({\n    username: ['', Validators.required],\n    password: ['', Validators.required]\n});\n\n\n  if (this.tokenStorage.getToken()) {\n    this.isLoggedIn = true;\n    this.roles = this.tokenStorage.getUser().roles;\n  } \n}\n/*\nonSubmitRegister(): void {\nconst { username, email, password } = this.formRegister;\nconsole.log(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\");\nthis.authService.register(username, email, password).subscribe({\n  next: (data: any) => {\n    console.log(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\");\n    console.log(data);\n    this.isSuccessful = true;\n    this.isSignUpFailed = false;\n  },\n  error: (err: { error: { message: any; }; }) => {\n    this.errorMessage = err.error.message;\n    this.isSignUpFailed = true;\n  }\n});\n}*/\n\nonSubmitLogin(): void {\nconst { username, password } = this.formLogin;\nconsole.log(\"test\");\n\nthis.authService.login(username, password).subscribe({\n  next: data => {\n    console.log(\"data : \", data); \n    this.tokenStorage.saveToken(data.accessToken);\n    this.tokenStorage.saveUser(data);\n\n    this.isLoginFailed = false;\n    this.isLoggedIn = true;\n    this.roles = this.tokenStorage.getUser().roles;\n\n    console.log(\"Roles : \", this.roles);   \n    console.log(\"user : \", this.tokenStorage.getUser()) ;    \n    this.router.navigate(['product/home']);\n  },\n  error: err => {\n    this.errorMessage = err.error.message;\n    this.isLoginFailed = true;\n  }\n});\n}\n\nreloadPage(): void {\nwindow.location.reload();\n}\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}