{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nlet InvoiceComponent = class InvoiceComponent {\n  constructor(formBuilder, router, studentService) {\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.studentService = studentService;\n    this.HobbyList = [\"Cricket\", 'Movies', 'TV', 'Reading', 'Magazine'];\n    this.HobbyArray = [];\n    this.vals = '';\n    this.data = this.vals.split(',');\n    this.addForm = this.formBuilder.group({\n      first_name: ['', Validators.required],\n      last_name: ['', [Validators.required, Validators.maxLength(20)]],\n      email: ['', [Validators.required, Validators.maxLength(20)]],\n      password: ['', [Validators.required, Validators.maxLength(20)]],\n      gender: ['', Validators.required],\n      hobbyField: new FormControl(this.data),\n      country: ['', Validators.required]\n    });\n  }\n  get authorizedArray() {\n    return this.addForm.get(\"hobbyField\");\n  }\n  parse() {\n    const result = this.HobbyList.map((x, index) => this.HobbyArray[index].value ? x : null).filter(x => x);\n    return result.length > 0 ? result : null;\n  }\n  ngOnInit() {\n    this.setAutorized(this.data);\n  }\n  setAutorized(data) {\n    this.HobbyArray = this.HobbyList.map(x => ({\n      name: x,\n      value: data.indexOf(x) >= 0\n    }));\n  }\n  onSubmit() {\n    this.studentService.createStudent(this.addForm.value).subscribe(data => {\n      this.router.navigate(['/']);\n    }, error => {\n      alert(error);\n    });\n  }\n};\nInvoiceComponent = __decorate([Component({\n  selector: 'app-invoice',\n  templateUrl: './invoice.component.html',\n  styleUrls: ['./invoice.component.css']\n})], InvoiceComponent);\nexport { InvoiceComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAiCC,WAAW,EAAEC,UAAU,QAAQ,gBAAgB;AASzE,IAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAS3BC,YACUC,WAAwB,EACxBC,MAAc,EACdC,cAA8B;IAF9B,gBAAW,GAAXF,WAAW;IACX,WAAM,GAANC,MAAM;IACN,mBAAc,GAAdC,cAAc;IARxB,cAAS,GAAQ,CAAC,SAAS,EAAC,QAAQ,EAAC,IAAI,EAAC,SAAS,EAAC,UAAU,CAAC;IAC/D,eAAU,GAAU,EAAE;IACtB,SAAI,GAAG,EAAE;IACT,SAAI,GAAE,IAAI,CAACC,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC;IAQtB,IAAI,CAACC,OAAO,GAAG,IAAI,CAACL,WAAW,CAACM,KAAK,CAAC;MACpCC,UAAU,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACW,QAAQ,CAAC;MACrCC,SAAS,EAAE,CAAC,EAAE,EAAE,CAACZ,UAAU,CAACW,QAAQ,EAAEX,UAAU,CAACa,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;MAChEC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACd,UAAU,CAACW,QAAQ,EAAEX,UAAU,CAACa,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;MAC5DE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACf,UAAU,CAACW,QAAQ,EAAEX,UAAU,CAACa,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;MAC/DG,MAAM,EAAE,CAAC,EAAE,EAAEhB,UAAU,CAACW,QAAQ,CAAC;MACjCM,UAAU,EAAE,IAAIlB,WAAW,CAAC,IAAI,CAACmB,IAAI,CAAC;MACtCC,OAAO,EAAE,CAAC,EAAE,EAAEnB,UAAU,CAACW,QAAQ;KAClC,CACA;EACF;EAED,IAAIS,eAAe;IACjB,OAAO,IAAI,CAACZ,OAAO,CAACa,GAAG,CAAC,YAAY,CAAc;EACpD;EACCC,KAAK;IACF,MAAMC,MAAM,GAAC,IAAI,CAACC,SAAS,CAACC,GAAG,CACjC,CAACC,CAAK,EAAEC,KAAS,KAAM,IAAI,CAACC,UAAU,CAACD,KAAK,CAAC,CAACE,KAAK,GAAGH,CAAC,GAAG,IAAK,CAC5D,CAACI,MAAM,CAAEJ,CAAK,IAAKA,CAAC,CAAC;IACtB,OAAOH,MAAM,CAACQ,MAAM,GAAC,CAAC,GAACR,MAAM,GAAC,IAAI;EACrC;EAEHS,QAAQ;IACN,IAAI,CAACC,YAAY,CAAC,IAAI,CAACf,IAAI,CAAC;EAC9B;EACDe,YAAY,CAACf,IAAc;IACzB,IAAI,CAACU,UAAU,GAAG,IAAI,CAACJ,SAAS,CAACC,GAAG,CAAEC,CAAK,KAAM;MAC/CQ,IAAI,EAAER,CAAC;MACPG,KAAK,EAAEX,IAAI,CAACiB,OAAO,CAACT,CAAC,CAAC,IAAI;KAC3B,CAAC,CAAC;EACL;EACCU,QAAQ;IACN,IAAI,CAAC/B,cAAc,CAACgC,aAAa,CAAC,IAAI,CAAC7B,OAAO,CAACqB,KAAK,CAAC,CAACS,SAAS,CAC5DpB,IAAQ,IAAG;MACV,IAAI,CAACd,MAAM,CAACmC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC,EACFC,KAAK,IAAG;MACNC,KAAK,CAACD,KAAK,CAAC;IACd,CAAC,CAAC;EACL;CACD;AAvDYvC,gBAAgB,eAL5BH,SAAS,CAAC;EACT4C,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB;CACtC,CAAC,GACW3C,gBAAgB,CAuD5B;SAvDYA,gBAAgB","names":["Component","FormControl","Validators","InvoiceComponent","constructor","formBuilder","router","studentService","vals","split","addForm","group","first_name","required","last_name","maxLength","email","password","gender","hobbyField","data","country","authorizedArray","get","parse","result","HobbyList","map","x","index","HobbyArray","value","filter","length","ngOnInit","setAutorized","name","indexOf","onSubmit","createStudent","subscribe","navigate","error","alert","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\hp\\techWebAvancee\\CRMFEFO\\src\\app\\pages\\invoice\\invoice.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { StudentsService } from '../students.service';\n\n@Component({\n  selector: 'app-invoice',\n  templateUrl: './invoice.component.html',\n  styleUrls: ['./invoice.component.css']\n})\nexport class InvoiceComponent implements OnInit {\n\n  addForm:any;\n\n  HobbyList: any = [\"Cricket\",'Movies','TV','Reading','Magazine'];\n  HobbyArray: any[] = [];\n  vals = ''\n  data= this.vals.split(',');\n \n  constructor( \n    private formBuilder: FormBuilder,\n    private router: Router,\n    private studentService:StudentsService\n    ) {\n\n      this.addForm = this.formBuilder.group({\n        first_name: ['', Validators.required],  \n        last_name: ['', [Validators.required, Validators.maxLength(20)]],  \n        email: ['', [Validators.required, Validators.maxLength(20)]] ,\n        password: ['', [Validators.required, Validators.maxLength(20)]] ,\n        gender: ['', Validators.required],    \n        hobbyField: new FormControl(this.data), \n        country: ['', Validators.required],   \n      }\n      )\n     }\n\n    get authorizedArray(){\n      return this.addForm.get(\"hobbyField\") as FormArray;\n    }  \n     parse() {\n        const result=this.HobbyList.map(\n      (x:any, index:any) => (this.HobbyArray[index].value ? x : null)\n        ).filter((x:any) => x);\n        return result.length>0?result:null\n     }\n\n  ngOnInit(): void {\n    this.setAutorized(this.data)\n  }\n setAutorized(data: string[]) {\n   this.HobbyArray = this.HobbyList.map((x:any) => ({\n     name: x,\n     value: data.indexOf(x) >= 0\n   }));\n }\n  onSubmit(){\n    this.studentService.createStudent(this.addForm.value).subscribe(\n      (data:any)=>{\n        this.router.navigate(['/']);  \n      },  \n     error => {  \n       alert(error);\n     });\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}