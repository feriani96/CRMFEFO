{"ast":null,"code":"import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/token-storage.service\";\nconst TOKEN_HEADER_KEY = 'Authorization'; // for Spring Boot back-end\n//const TOKEN_HEADER_KEY = 'x-access-token';   // for Node.js Express back-end\nexport class AuthInterceptor {\n  constructor(token) {\n    this.token = token;\n  }\n  intercept(req, next) {\n    let authReq = req;\n    const token = this.token.getUser().id_token;\n    console.log(\"hello : token +++++++++++ \", token);\n    if (token != null) {\n      // for Spring Boot back-end\n      authReq = req.clone({\n        headers: req.headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token)\n      });\n      console.log(\"hello : +++++++++++ \", authReq);\n      // for Node.js Express back-end\n      //authReq = req.clone({ headers: req.headers.set(TOKEN_HEADER_KEY, token) });\n    }\n\n    return next.handle(authReq);\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)(i0.ɵɵinject(i1.TokenStorageService));\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});\nexport const authInterceptorProviders = [{\n  provide: HTTP_INTERCEPTORS,\n  useClass: AuthInterceptor,\n  multi: true\n}];","map":{"version":3,"mappings":"AAAA,SAASA,iBAAiB,QAAmB,sBAAsB;;;AAOlE,MAAMC,gBAAgB,GAAG,eAAe,CAAC,CAAO;AACjD;AAGA,OAAM,MAAOC,eAAe;EAC1BC,YAAoBC,KAA0B;IAA1B,UAAK,GAALA,KAAK;EAAyB;EAElDC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAChD,IAAIC,OAAO,GAAGF,GAAG;IACjB,MAAMF,KAAK,GAAG,IAAI,CAACA,KAAK,CAACK,OAAO,EAAE,CAACC,QAAQ;IAC3CC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAER,KAAK,CAAC;IAChD,IAAIA,KAAK,IAAI,IAAI,EAAE;MACjB;MACCI,OAAO,GAAGF,GAAG,CAACO,KAAK,CAAC;QAAEC,OAAO,EAAER,GAAG,CAACQ,OAAO,CAACC,GAAG,CAACd,gBAAgB,EAAE,SAAS,GAAGG,KAAK;MAAC,CAAE,CAAC;MACvFO,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEJ,OAAO,CAAC;MAC5C;MACA;;;IAEF,OAAOD,IAAI,CAACS,MAAM,CAACR,OAAO,CAAC;EAC7B;;AAfWN,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAe,SAAff,eAAe;AAAA;AAkB5B,OAAO,MAAMgB,wBAAwB,GAAG,CACtC;EAAEC,OAAO,EAAEnB,iBAAiB;EAAEoB,QAAQ,EAAElB,eAAe;EAAEmB,KAAK,EAAE;AAAI,CAAE,CACvE","names":["HTTP_INTERCEPTORS","TOKEN_HEADER_KEY","AuthInterceptor","constructor","token","intercept","req","next","authReq","getUser","id_token","console","log","clone","headers","set","handle","factory","authInterceptorProviders","provide","useClass","multi"],"sourceRoot":"","sources":["/home/hp/Desktop/crm project/CRMFEFO/src/app/_helpers/auth.interceptor.ts"],"sourcesContent":["import { HTTP_INTERCEPTORS, HttpEvent } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\n\nimport { TokenStorageService } from '../_services/token-storage.service';\nimport { Observable } from 'rxjs';\n\n const TOKEN_HEADER_KEY = 'Authorization';       // for Spring Boot back-end\n//const TOKEN_HEADER_KEY = 'x-access-token';   // for Node.js Express back-end\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private token: TokenStorageService) { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    let authReq = req;\n    const token = this.token.getUser().id_token;\n    console.log(\"hello : token +++++++++++ \", token);\n    if (token != null) {\n      // for Spring Boot back-end\n       authReq = req.clone({ headers: req.headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token) });\n      console.log(\"hello : +++++++++++ \", authReq);\n      // for Node.js Express back-end\n      //authReq = req.clone({ headers: req.headers.set(TOKEN_HEADER_KEY, token) });\n    }\n    return next.handle(authReq);\n  }\n}\n\nexport const authInterceptorProviders = [\n  { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true }\n];"]},"metadata":{},"sourceType":"module","externalDependencies":[]}