{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nexport class ProductFormService {\n  createProductFormGroup(product = {\n    id: null\n  }) {\n    const productRawValue = {\n      ...this.getFormDefaults(),\n      ...product\n    };\n    return new FormGroup({\n      id: new FormControl({\n        value: productRawValue.id,\n        disabled: true\n      }, {\n        nonNullable: true,\n        validators: [Validators.required]\n      }),\n      name: new FormControl(productRawValue.name),\n      price: new FormControl(productRawValue.price),\n      photo: new FormControl(productRawValue.photo),\n      photoContentType: new FormControl(productRawValue.photoContentType),\n      description: new FormControl(productRawValue.description),\n      tax: new FormControl(productRawValue.tax)\n    });\n  }\n  getProduct(form) {\n    return form.getRawValue();\n  }\n  resetForm(form, product) {\n    const productRawValue = {\n      ...this.getFormDefaults(),\n      ...product\n    };\n    form.reset({\n      ...productRawValue,\n      id: {\n        value: productRawValue.id,\n        disabled: true\n      }\n    });\n  }\n  getFormDefaults() {\n    return {\n      id: null\n    };\n  }\n}\nProductFormService.ɵfac = function ProductFormService_Factory(t) {\n  return new (t || ProductFormService)();\n};\nProductFormService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductFormService,\n  factory: ProductFormService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,SAAS,EAAEC,WAAW,EAAEC,UAAU,QAAQ,gBAAgB;;AA8BnE,OAAM,MAAOC,kBAAkB;EAC7BC,sBAAsB,CAACC,UAAiC;IAAEC,EAAE,EAAE;EAAI,CAAE;IAClE,MAAMC,eAAe,GAAG;MACtB,GAAG,IAAI,CAACC,eAAe,EAAE;MACzB,GAAGH;KACJ;IACD,OAAO,IAAIL,SAAS,CAA0B;MAC5CM,EAAE,EAAE,IAAIL,WAAW,CACjB;QAAEQ,KAAK,EAAEF,eAAe,CAACD,EAAE;QAAEI,QAAQ,EAAE;MAAI,CAAE,EAC7C;QACEC,WAAW,EAAE,IAAI;QACjBC,UAAU,EAAE,CAACV,UAAU,CAACW,QAAQ;OACjC,CACF;MACDC,IAAI,EAAE,IAAIb,WAAW,CAACM,eAAe,CAACO,IAAI,CAAC;MAC3CC,KAAK,EAAE,IAAId,WAAW,CAACM,eAAe,CAACQ,KAAK,CAAC;MAC7CC,KAAK,EAAE,IAAIf,WAAW,CAACM,eAAe,CAACS,KAAK,CAAC;MAC7CC,gBAAgB,EAAE,IAAIhB,WAAW,CAACM,eAAe,CAACU,gBAAgB,CAAC;MACnEC,WAAW,EAAE,IAAIjB,WAAW,CAACM,eAAe,CAACW,WAAW,CAAC;MACzDC,GAAG,EAAE,IAAIlB,WAAW,CAACM,eAAe,CAACY,GAAG;KACzC,CAAC;EACJ;EAEAC,UAAU,CAACC,IAAsB;IAC/B,OAAOA,IAAI,CAACC,WAAW,EAA2B;EACpD;EAEAC,SAAS,CAACF,IAAsB,EAAEhB,OAA8B;IAC9D,MAAME,eAAe,GAAG;MAAE,GAAG,IAAI,CAACC,eAAe,EAAE;MAAE,GAAGH;IAAO,CAAE;IACjEgB,IAAI,CAACG,KAAK,CACR;MACE,GAAGjB,eAAe;MAClBD,EAAE,EAAE;QAAEG,KAAK,EAAEF,eAAe,CAACD,EAAE;QAAEI,QAAQ,EAAE;MAAI;KACzC,CACT;EACH;EAEQF,eAAe;IACrB,OAAO;MACLF,EAAE,EAAE;KACL;EACH;;AAzCWH,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAsB,SAAlBtB,kBAAkB;EAAAuB,YADL;AAAM","names":["FormGroup","FormControl","Validators","ProductFormService","createProductFormGroup","product","id","productRawValue","getFormDefaults","value","disabled","nonNullable","validators","required","name","price","photo","photoContentType","description","tax","getProduct","form","getRawValue","resetForm","reset","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hp\\techWebAvancee\\CRM PROJECT\\CRMFEFO\\src\\app\\product\\edit\\edit.component.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\n\r\nimport { IProduct, NewProduct } from '../product.model';\r\n\r\n/**\r\n * A partial Type with required key is used as form input.\r\n */\r\ntype PartialWithRequiredKeyOf<T extends { id: unknown }> = Partial<Omit<T, 'id'>> & { id: T['id'] };\r\n\r\n/**\r\n * Type for createFormGroup and resetForm argument.\r\n * It accepts IProduct for edit and NewProductFormGroupInput for create.\r\n */\r\ntype ProductFormGroupInput = IProduct | PartialWithRequiredKeyOf<NewProduct>;\r\n\r\ntype ProductFormDefaults = Pick<NewProduct, 'id'>;\r\n\r\ntype ProductFormGroupContent = {\r\n  id: FormControl<IProduct['id'] | NewProduct['id']>;\r\n  name: FormControl<IProduct['name']>;\r\n  price: FormControl<IProduct['price']>;\r\n  photo: FormControl<IProduct['photo']>;\r\n  photoContentType: FormControl<IProduct['photoContentType']>;\r\n  description: FormControl<IProduct['description']>;\r\n  tax: FormControl<IProduct['tax']>;\r\n};\r\n\r\nexport type ProductFormGroup = FormGroup<ProductFormGroupContent>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ProductFormService {\r\n  createProductFormGroup(product: ProductFormGroupInput = { id: null }): ProductFormGroup {\r\n    const productRawValue = {\r\n      ...this.getFormDefaults(),\r\n      ...product,\r\n    };\r\n    return new FormGroup<ProductFormGroupContent>({\r\n      id: new FormControl(\r\n        { value: productRawValue.id, disabled: true },\r\n        {\r\n          nonNullable: true,\r\n          validators: [Validators.required],\r\n        }\r\n      ),\r\n      name: new FormControl(productRawValue.name),\r\n      price: new FormControl(productRawValue.price),\r\n      photo: new FormControl(productRawValue.photo),\r\n      photoContentType: new FormControl(productRawValue.photoContentType),\r\n      description: new FormControl(productRawValue.description),\r\n      tax: new FormControl(productRawValue.tax),\r\n    });\r\n  }\r\n\r\n  getProduct(form: ProductFormGroup): IProduct | NewProduct {\r\n    return form.getRawValue() as IProduct | NewProduct;\r\n  }\r\n\r\n  resetForm(form: ProductFormGroup, product: ProductFormGroupInput): void {\r\n    const productRawValue = { ...this.getFormDefaults(), ...product };\r\n    form.reset(\r\n      {\r\n        ...productRawValue,\r\n        id: { value: productRawValue.id, disabled: true },\r\n      } as any \r\n    );\r\n  }\r\n\r\n  private getFormDefaults(): ProductFormDefaults {\r\n    return {\r\n      id: null,\r\n    };\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}