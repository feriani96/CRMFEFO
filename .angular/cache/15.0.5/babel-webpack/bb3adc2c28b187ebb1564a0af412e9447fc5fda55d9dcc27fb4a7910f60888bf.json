{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/service/auth.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"src/app/_services/token-storage.service\";\nexport class RegisterComponent {\n  constructor(router, authService, formBuilder, tokenStorage) {\n    this.router = router;\n    this.authService = authService;\n    this.formBuilder = formBuilder;\n    this.tokenStorage = tokenStorage;\n    this.formRegister = {\n      username: null,\n      email: null,\n      password: null\n    };\n    this.isSuccessful = false;\n    this.isSignUpFailed = false;\n    this.errorMessage = '';\n    this.formLogin = {\n      username: null,\n      password: null\n    };\n    this.isLoggedIn = false;\n    this.isLoginFailed = false;\n    this.errorMessage2 = '';\n    this.roles = [];\n  }\n  ngOnInit() {\n    this.formRegister = this.formBuilder.group({\n      username: ['', Validators.required],\n      email: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n    this.formLogin = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n    if (this.tokenStorage.getToken()) {\n      this.isLoggedIn = true;\n      this.roles = this.tokenStorage.getUser().roles;\n    }\n  }\n  onSubmitRegister() {\n    const {\n      username,\n      email,\n      password\n    } = this.formRegister;\n    console.log(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\");\n    this.authService.register(username, email, password).subscribe({\n      next: data => {\n        console.log(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\");\n        console.log(data);\n        this.isSuccessful = true;\n        this.isSignUpFailed = false;\n      },\n      error: err => {\n        this.errorMessage = err.error.message;\n        this.isSignUpFailed = true;\n      }\n    });\n  }\n  onSubmitLogin() {\n    const {\n      username,\n      password\n    } = this.formLogin;\n    console.log(\"test\");\n    this.authService.login(username, password).subscribe({\n      next: data => {\n        console.log(\"data : \", data);\n        this.tokenStorage.saveToken(data.accessToken);\n        this.tokenStorage.saveUser(data);\n        this.isLoginFailed = false;\n        this.isLoggedIn = true;\n        this.roles = this.tokenStorage.getUser().roles;\n        console.log(\"Roles : \", this.roles);\n        console.log(\"user : \", this.tokenStorage.getUser());\n        this.router.navigate(['product/home']);\n      },\n      error: err => {\n        this.errorMessage = err.error.message;\n        this.isLoginFailed = true;\n      }\n    });\n  }\n  reloadPage() {\n    window.location.reload();\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.TokenStorageService));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 2,\n  vars: 0,\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h5\");\n      i0.ɵɵtext(1, \"Register\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","RegisterComponent","constructor","router","authService","formBuilder","tokenStorage","username","email","password","ngOnInit","formRegister","group","required","formLogin","getToken","isLoggedIn","roles","getUser","onSubmitRegister","console","log","register","subscribe","next","data","isSuccessful","isSignUpFailed","error","err","errorMessage","message","onSubmitLogin","login","saveToken","accessToken","saveUser","isLoginFailed","navigate","reloadPage","window","location","reload","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["/home/hp/Desktop/crm project/CRMFEFO/src/app/auth/register/register.component.ts","/home/hp/Desktop/crm project/CRMFEFO/src/app/auth/register/register.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators ,FormGroup} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/service/auth.service';\nimport { TokenStorageService } from 'src/app/_services/token-storage.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit{\n\n formRegister:any={\n    username:null,\n    email:null,\n    password:null\n};\n\n  isSuccessful = false;\n  isSignUpFailed = false;\n  errorMessage = '';\n\n  formLogin: any = {\n    username: null,\n    password: null\n  };\n  isLoggedIn = false;\n  isLoginFailed = false;\n  errorMessage2 = '';\n  roles: string[] = []; \n\n  \n\nconstructor(private router: Router,\nprivate authService: AuthService,\nprivate formBuilder: FormBuilder, \nprivate tokenStorage: TokenStorageService) { }\n\nngOnInit(): void {\nthis.formRegister = this.formBuilder.group({\n    username: ['',Validators.required],\n    email: ['',Validators.required],\n    password: ['',Validators.required],\n   \n  });\n\n  this.formLogin = this.formBuilder.group({\n    username: ['', Validators.required],\n    password: ['', Validators.required]\n});\n\n\n  if (this.tokenStorage.getToken()) {\n    this.isLoggedIn = true;\n    this.roles = this.tokenStorage.getUser().roles;\n  } \n}\n\nonSubmitRegister(): void {\nconst { username, email, password } = this.formRegister;\nconsole.log(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\");\nthis.authService.register(username, email, password).subscribe({\n  next: (data: any) => {\n    console.log(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\");\n    console.log(data);\n    this.isSuccessful = true;\n    this.isSignUpFailed = false;\n  },\n  error: (err: { error: { message: any; }; }) => {\n    this.errorMessage = err.error.message;\n    this.isSignUpFailed = true;\n  }\n});\n}\n\nonSubmitLogin(): void {\nconst { username, password } = this.formLogin;\nconsole.log(\"test\");\n\nthis.authService.login(username, password).subscribe({\n  next: data => {\n    console.log(\"data : \", data); \n    this.tokenStorage.saveToken(data.accessToken);\n    this.tokenStorage.saveUser(data);\n\n    this.isLoginFailed = false;\n    this.isLoggedIn = true;\n    this.roles = this.tokenStorage.getUser().roles;\n\n    console.log(\"Roles : \", this.roles);   \n    console.log(\"user : \", this.tokenStorage.getUser()) ;    \n    this.router.navigate(['product/home']);\n  },\n  error: err => {\n    this.errorMessage = err.error.message;\n    this.isLoginFailed = true;\n  }\n});\n}\n\nreloadPage(): void {\nwindow.location.reload();\n}\n\n}\n","<!----design start -->\n\n<!--section class=\"vh-100\" style=\"background-color: #1d9d7f;\">\n    <div class=\"container py-5 h-100\">\n      <div class=\"row d-flex justify-content-center align-items-center h-100\">\n        <div class=\"col col-xl-10\">\n          <div class=\"card\" style=\"border-radius: 1rem;\">\n            <div class=\"row g-0\">\n              <div class=\"col-md-6 col-lg-5 d-none d-md-block\">\n                <img src=\"/assets/img/registration.jpg\"\n                  alt=\"login form\" class=\"img-fluid\" style=\"border-radius: 1rem 0 0 1rem;\" />\n              </div>\n              <div class=\"col-md-6 col-lg-7 d-flex align-items-center\">\n                <div class=\"card-body p-4 p-lg-5 text-black\">\n  \n                  <form *ngIf=\"!isSuccessful\" name=\"form\" (ngSubmit)=\"f.form.valid && onSubmitRegister()\"\n                    #f=\"ngForm\" novalidate>\n  \n                    <div class=\"d-flex align-items-center mb-3 pb-1\">\n                      <i class=\"fas fa-cubes fa-2x me-3\" style=\"color: #ff6219;\"></i>\n                      <span class=\"h1 fw-bold mb-0\">Invoice App</span>\n                    </div>\n  \n                  \n                    <div class=\"form-outline mb-4\">\n                       <label for=\"username\">Username or email address <span>*</span></label>\n                        <input type=\"text\" class=\"form-control\" name=\"username\" [(ngModel)]=\"formRegister.username\"\n                        required minlength=\"3\" maxlength=\"20\" #username=\"ngModel\">\n                      </div>\n\n                    <div class=\"form-outline mb-4\">\n                      <label for=\"email-id\">Email Address <span>*</span></label>\n                      <input type=\"email\" class=\"form-control\" name=\"email\" [(ngModel)]=\"formRegister.email\"\n                          required email #email=\"ngModel\">\n                     <div class=\"alert-danger\" *ngIf=\"email.errors && f.submitted\">\n                        <div *ngIf=\"email.errors['required']\">Email is required</div>\n                        <div *ngIf=\"email.errors['email']\">\n                            Email must be a valid email address\n                        </div>\n                    </div>\n  \n                    <div class=\"form-outline mb-4\">\n                      <label for=\"userpass\">Password <span>*</span></label>\n                      <input id=\"userpass\" type=\"password\" placeholder=\"Enter password...\" type=\"password\"\n                          class=\"form-control\" name=\"password\" [(ngModel)]=\"formRegister.password\" required\n                          minlength=\"3\" #password=\"ngModel\">\n                    </div>\n  \n\n                     <div class=\"form-group pt-1 mb-4\">\n                       <button class=\"btn btn-dark btn-lg btn-block\">Sign Up</button>\n                     </div>\n\n                    <div class=\"alert alert-warning\" *ngIf=\"f.submitted && isSignUpFailed\">\n                        Signup failed!<br />{{ errorMessage }}\n                    </div>\n                                    \n                    <p class=\"mb-5 pb-lg-2\" style=\"color: #1d9d7f;\" >already have account <a routerLink=\"/login\"\n                        style=\"color: #1d9d7f;\">login here</a></p>\n                  \n                  </form>\n  \n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </section-->\n<!----design ends-->\n\n\n\n<h5>Register</h5>\n<!--form *ngIf=\"!isSuccessful\" name=\"form\" (ngSubmit)=\"f.form.valid && onSubmitRegister()\"\n    #f=\"ngForm\" novalidate>\n    <label for=\"username\">Username or email address <span>*</span></label>\n    <input type=\"text\" class=\"form-control\" name=\"username\" [(ngModel)]=\"formRegister.username\"\n        required minlength=\"3\" maxlength=\"20\" #username=\"ngModel\">\n    <label for=\"email-id\">Email Address <span>*</span></label>\n    <input type=\"email\" class=\"form-control\" name=\"email\" [(ngModel)]=\"formRegister.email\"\n        required email #email=\"ngModel\">\n    <div class=\"alert-danger\" *ngIf=\"email.errors && f.submitted\">\n        <div *ngIf=\"email.errors['required']\">Email is required</div>\n        <div *ngIf=\"email.errors['email']\">\n            Email must be a valid email address\n        </div>\n    </div>\n    <label for=\"userpass\">Password <span>*</span></label>\n    <input id=\"userpass\" type=\"password\" placeholder=\"Enter password...\" type=\"password\"\n        class=\"form-control\" name=\"password\" [(ngModel)]=\"formRegister.password\" required\n        minlength=\"3\" #password=\"ngModel\">\n\n\n    <div class=\"login-action mb-10 fix\">\n        <p>Your personal data will be used to support your experience throughout this\n            website, to manage access to your account, and for other purposes described\n            in our <a href=\"#\">privacy policy</a>.</p>\n    </div>\n\n\n    <div class=\"form-group\">\n        <button class=\"tp-in-btn w-100\">Sign Up</button>\n    </div>\n\n    <div class=\"alert alert-warning\" *ngIf=\"f.submitted && isSignUpFailed\">\n        Signup failed!<br />{{ errorMessage }}\n    </div>\n    </form-->"]},"metadata":{},"sourceType":"module","externalDependencies":[]}